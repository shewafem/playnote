generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String           @id @default(cuid())
  name                     String?
  email                    String           @unique
  emailVerified            DateTime?
  image                    String?
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  hashedPassword           String?
  passwordResetToken       String?          @unique
  passwordResetTokenExpiry DateTime?
  role                     UserRole         @default(STUDENT)
  arpeggiosCreated         Int[]
  scalesCreated            Int[]
  tuningsCreated           Int[]
  savedFretboards          String[]
  accounts                 Account[]
  sessions                 Session[]
  learnedArpeggios         Arpeggio[]       @relation("ArpeggioToUser")
  learnedPositions         Position[]       @relation("PositionToUser")
  learnedScales            Scale[]          @relation("ScaleToUser")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  id                String   @id @default(cuid())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Chord {
  id        Int        @id @default(autoincrement())
  key       String
  suffix    String
  positions Position[]

  @@unique([key, suffix])
  @@index([key])
}

model Position {
  id        Int      @id @default(autoincrement())
  frets     Int[]
  fingers   Int[]
  baseFret  Int
  barres    Int[]
  midi      Int[]
  capo      Boolean?
  chordId   Int
  chord     Chord    @relation(fields: [chordId], references: [id], onDelete: Cascade)
  learnedBy User[]   @relation("PositionToUser")

  @@index([chordId])
}

model Scale {
  id        Int    @id @default(autoincrement())
  name      String @unique
  formula   Int[]  @unique
  learnedBy User[] @relation("ScaleToUser")
}

model Arpeggio {
  id        Int    @id @default(autoincrement())
  name      String @unique
  formula   Int[]  @unique
  learnedBy User[] @relation("ArpeggioToUser")
}

model Tuning {
  id    Int      @id @default(autoincrement())
  name  String   @unique
  notes String[] @unique
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}