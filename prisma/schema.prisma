// Define database connection via the `DATABASE_URL` env var
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define custom output path for generated Prisma Client
generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String? 
  image          String?   
  role           UserRole  @default(STUDENT)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts Account[]

  // Admin/Teacher
  coursesCreated Course[]  @relation("TeacherCourses")

  // Student
  enrollments Enrollment[]
  progress    LessonProgress[]

  // password reset
  passwordResetToken       String?   @unique
  passwordResetTokenExpiry DateTime?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum CourseGenre {
  ROCK
  BLUES
  JAZZ
  CLASSICAL
  METAL
  POP
  COUNTRY
  ACOUSTIC
  FINGERSTYLE
  OTHER
}

model Course {
  id              String          @id @default(cuid())
  title           String
  description     String          @db.Text
  difficulty      DifficultyLevel
  genre           CourseGenre
  thumbnailUrl    String?
  prerequisites   String?         @db.Text
  price           Float?          
  isPublished     Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  teacherId       String
  teacher         User            @relation("TeacherCourses", fields: [teacherId], references: [id])

  lessons         Lesson[]
  enrollments     Enrollment[]
  category        Category?       @relation(fields: [categoryId], references: [id])
  categoryId      String?
}

model Category {
  id      String    @id @default(cuid())
  name    String    @unique
  courses Course[]
}


enum LessonContentType {
  VIDEO_EMBED // YouTube, Vimeo URL
  VIDEO_UPLOAD // Path to uploaded video
  TEXT
  PDF_DOCUMENT // Path to uploaded PDF
  AUDIO_UPLOAD // Path to uploaded audio
}

model Lesson {
  id            String            @id @default(cuid())
  title         String
  content       String            @db.Text // URL for embeds/uploads, or rich text content
  contentType   LessonContentType
  order         Int               
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  courseId      String
  course        Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress  LessonProgress[]
  attachments   Attachment[]
}

// PDFs, tabs, backing tracks
model Attachment {
  id        String    @id @default(cuid())
  name      String
  url       String    // URL to the uploaded file (S3, Cloudinary, etc.)
  fileType  String    // e.g., 'pdf', 'gp5', 'mp3'
  size      Int?      // File size in bytes
  createdAt DateTime  @default(now())

  lessonId  String
  lesson    Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}


model Enrollment {
  id          String   @id @default(cuid())
  enrolledAt  DateTime @default(now())

  studentId   String
  student     User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId]) // A student can enroll in a course only once
}

model LessonProgress {
  id          String   @id @default(cuid())
  completedAt DateTime @default(now())
  isCompleted Boolean  @default(false)

  studentId   String
  student     User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([studentId, lessonId]) // Progress for a lesson per student
}